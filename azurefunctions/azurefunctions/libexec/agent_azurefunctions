#!/usr/bin/env python3
"""Azure Function App check for CheckMK.

It allows to query function invocations in App Insights and raise
alerts based on invocation count and/or invocation failures.

In the CheckMK "special agent" framework, this file is responsible to
perform the actual check against the external system, format the
output and print it with standard separators to the stdout.

This script is launched by CheckMK in a language independent way
(hence the need of the shebang), with command line arguments computed
by server_side_calls/special_agent.py.

That output will be then taken by the agent_based/azurefunctions.py.

"""

import argparse
import asyncio
import json
import logging
import os

from azure.identity.aio import ClientSecretCredential
from azure.identity.aio import AzureCliCredential
from azure.mgmt.web.aio import WebSiteManagementClient
import aiohttp

#
# parse cli arguments
#

parser = argparse.ArgumentParser("agent_azurefunctions")
parser.add_argument(
    '--tenant-id',
    required=False,
    type=str,
    help='Azure Tenant ID',
)
parser.add_argument(
    '--subscription-id',
    required=True,
    type=str,
    help='Azure Subscription ID',
)
parser.add_argument(
    '--resource-group',
    required=True,
    type=str,
    help='Azure Resource group name',
)
parser.add_argument(
    '--client-id',
    required=False,
    type=str,
    help='Client ID of the Azure service principal',
)
parser.add_argument(
    '--client-secret',
    required=False,
    type=str,
    help='Client secret of the Azure service principal',
)
parser.add_argument(
    '--appinsights-app-id',
    required=True,
    type=str,
    help='App ID of the Azure App Insights resource',
)
parser.add_argument(
    '--timedelta-kql',
    required=True,
    type=str,
    help='Log timedelta in KQL expression (e.g. 1d = 1 day, 6h = 6 hours, ...',
)
parser.add_argument(
    '--proxy',
    required=False,
    type=str,
    default=None,
    help='Proxy requests, for example https://my.proxy:8080',
)
parser.add_argument(
    '--use-cli-credentials',
    required=False,
    default=False,
    action='store_true',
    help='Debug for local development with Az CLI credentials',
)
args = parser.parse_args()

#
# login and execute log analytics workspace query
#

if args.proxy:
    # set proxy via environment:
    # https://learn.microsoft.com/en-us/azure/developer/python/sdk/azure-sdk-configure-proxy?tabs=bash#set-in-python-code
    os.environ["HTTP_PROXY"] = args.proxy
    os.environ["HTTPS_PROXY"] = args.proxy
    proxies = {
        'http': args.proxy,
        'https': args.proxy,
    }
else:
    proxies = None

if args.use_cli_credentials:
    credential = AzureCliCredential()
else:
    credential = ClientSecretCredential(
        tenant_id=args.tenant_id,
        client_id=args.client_id,
        client_secret=args.client_secret,
    )


async def discover_functions():
    funcconf = {}
    rg = args.resource_group
    async with WebSiteManagementClient(credential,
                                       args.subscription_id) as web_mgmt:

        async def _list_funcs_in_app(app):
            funcs = web_mgmt.web_apps.list_functions(
                resource_group_name=rg,
                name=app.name,
            )
            return app.name, [
                {
                    # name of the function in the function app
                    "name": func.config.get("name"),
                    # type of function (timerTrigger, httpTrigger)
                    "type": func.config.get("bindings")[0].get("type"),
                    # cron expression (if timerTrigger)
                    "schedule": func.config.get("bindings")[0].get("schedule"),
                } async for func in funcs
            ]

        funcapps = [
            app async for app in web_mgmt.web_apps.list_by_resource_group(rg)
            if "functionapp" in app.kind.split(",")
        ]

        tasks = (_list_funcs_in_app(app) for app in funcapps)
        funcs = await asyncio.gather(*tasks)

    for func in funcs:
        funcconf[func[0]] = func[1]

    return funcconf


async def query_appinsights():
    query = f"""requests
    | extend altFuncName = tostring(customDimensions["faas.name"])
    | project
        timestamp,
        id,
        operation_Name,
        success,
        resultCode,
        duration,
        operation_Id,
        altFuncName,
        cloud_RoleName,
        invocationId=coalesce(
            tostring(customDimensions["InvocationId"]),
            tostring(customDimensions["faas.invocation_id"])
        )
    | where timestamp > ago({args.timedelta_kql})
    | order by timestamp desc
    """

    appinsights_baseurl = 'https://api.applicationinsights.io'
    token = await credential.get_token(f'{appinsights_baseurl}/.default')
    headers = {'Authorization': f'Bearer {token.token}'}
    params = {"query": query}
    url = f'{appinsights_baseurl}/v1/apps/{args.appinsights_app_id}/query'

    try:
        async with aiohttp.ClientSession(headers=headers) as session:
            async with session.get(url, params=params) as resp:
                resp.raise_for_status()
                logs = await resp.json()
    except Exception as e:
        try:
            errmsg = "error: " + json.dumps(logs.get('error', {}))
        except Exception:
            errmsg = "error: %s - %s" % (type(e).__name__, str(e))
        raise Exception(errmsg) from e

    log_lines_json = []
    cols = [c['name'] for c in logs['tables'][0]['columns']]
    for row in logs['tables'][0]['rows']:
        structured = dict(zip(cols, row))
        log_lines_json.append(structured)
    return log_lines_json


async def main():
    res = await asyncio.gather(
        discover_functions(),
        query_appinsights(),
    )
    disc = res[0]
    logs = res[1]
    print('<<<azurefunctions:sep(0)>>>')
    print(json.dumps(disc))
    for log in logs:
        print(json.dumps(log))
    await credential.close()


if __name__ == "__main__":
    # if aiohttp logs to stdout, it will break check output
    logging.basicConfig(level=logging.ERROR)
    for logger in ['asyncio', 'aiohttp.client', 'aiohttp.internal']:
        logging.getLogger(logger).setLevel(logging.ERROR)

    asyncio.run(main())

# next step: output is parsed and interpreted by agent_based/azurefunctions.py
